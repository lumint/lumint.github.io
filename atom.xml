<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lumint's Octopress Blog]]></title>
  <link href="http://lumint.github.io/atom.xml" rel="self"/>
  <link href="http://lumint.github.io/"/>
  <updated>2013-10-01T15:38:51+08:00</updated>
  <id>http://lumint.github.io/</id>
  <author>
    <name><![CDATA[Lumint]]></name>
    <email><![CDATA[smilemint8895@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Heapsort]]></title>
    <link href="http://lumint.github.io/blog/2013/10/01/heapsort/"/>
    <updated>2013-10-01T00:57:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/10/01/heapsort</id>
    <content type="html"><![CDATA[<p>Hello Heapsort</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java常用知识点]]></title>
    <link href="http://lumint.github.io/blog/2013/07/15/javachang-yong-zhi-shi-dian/"/>
    <updated>2013-07-15T18:19:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/07/15/javachang-yong-zhi-shi-dian</id>
    <content type="html"><![CDATA[<pre><code>基本知识点:
    1.变量的种类：全局变量(static类对象) 成员变量(对象的变量) 局部变量(方法中的变量) 
    2.Java中的两种数据类型：值类型，引用类型   
        public static void main(String[] args){
            int a = 0;
            Student stu = new Student();
            stu.setValue(0);
            test(a,stu);//把main中a的值(0)赋值给test方法的形参a(test方法的栈空间),把main中stu的地址赋值给test方法形参stu所在空间。
            System.out.printf("a =" + a + "; stu.getValue=" + stu.getValue());
        }

        public static void test(int a,Student stu){
            a = 10;
            stu.setValue(10);
        }
        &gt;运行结果：a =0; stu.getValue=10;
        &gt;值类型和引用类型的区别 值类型是直接赋值(是一份拷贝),引用类型是指向的同一地址   
    3.
    4.
    5.
    6.
    7.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Command]]></title>
    <link href="http://lumint.github.io/blog/2013/05/16/sql-command/"/>
    <updated>2013-05-16T11:17:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/05/16/sql-command</id>
    <content type="html"><![CDATA[<p>SQL Command:</p>

<pre><code>修改以存在数据库的编码:ALTER DATABASE database_name DEFAULT CHARACTER SET utf8 COLLATE utf8_bin
修改以存在表的编码:ALTER TABLE table_name DEFAULT CHARACTER SET utf8 COLLATE utf8_bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms]]></title>
    <link href="http://lumint.github.io/blog/2013/05/13/algorithms/"/>
    <updated>2013-05-13T13:16:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/05/13/algorithms</id>
    <content type="html"><![CDATA[<p>Sorted Algorithms:</p>

<pre><code>Bubble Sort:

/** 
 * bubble sort  
 * 0(n^2)
 * @param data
 */
public static void bubbleSort(int[] data){
    for(int i = 0;i &lt; data.length ;i++){
        for(int j = 0;j &lt; data.length-i-1;j++){
            if(data[j] &gt; data[j+1])swap(data,j,j+1); 
        }
    }
}

/**
 * The worst time  0(n^2)
 * The average time 0(nlg(n))
 * @param data
 * @param start
 * @param end
 */
public static void quickSort(int[] data,int start,int end){
    if(start &gt; end) return;
    int povit = data[start];
    int j = start;
    for(int i=start ;i &lt;= end ; i++){
        if(data[i] &lt; povit ) swap(data,i,++j);
    }
    swap(data,j,start);
    quickSort(data,start,j-1);
    quickSort(data, j+1, end);
}

public static void swap(int[] data, int j, int i) {
    int temp = data[i];
    data[i] = data[j];
    data[j] = temp;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discrete Mathematics]]></title>
    <link href="http://lumint.github.io/blog/2013/04/19/discrete-mathematics/"/>
    <updated>2013-04-19T17:19:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/04/19/discrete-mathematics</id>
    <content type="html"><![CDATA[<p>拓扑排序:</p>

<pre><code>对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若 ∈E(G)，则u在线性序列中出现在v之前。
</code></pre>

<p>拓扑排序应用:</p>

<pre><code>拓扑排序常用来确定一个依赖关系集中，事物发生的顺序。例如，在日常工作中，可能会将项目拆分成A、B、C、D四个子部分来完成，但A依赖于B和D，C依赖于D。为了计算这个项目进行的顺序，可对这个关系集进行拓扑排序，得出一个线性的序列，则排在前面的任务就是需要先完成的任务。
</code></pre>

<p>拓扑排序方法:</p>

<pre><code>(1)从有向图中选择一个没有前驱(即入度为0)的顶点并且输出它.
(2)从网中删去该顶点,并且删去从该顶点发出的全部有向边.
(3)重复上述两步,直到剩余的网中不再存在没有前趋的顶点为止.
                            &lt;from baike.baidu.com&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open System Interconnection Reference Model]]></title>
    <link href="http://lumint.github.io/blog/2013/04/19/open-system-interconnection-reference-model/"/>
    <updated>2013-04-19T16:39:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/04/19/open-system-interconnection-reference-model</id>
    <content type="html"><![CDATA[<p>OSI/RM:</p>

<pre><code>第七层 应用层
    与应用程序界面沟通,达到展示给用户的目的。常见的协议有：HTTP，HTTPS，FTP。TELNET，SSH，SMTP，POP3等。
第六层 表示层
    为不同的客户端提供数据和信息的语法转换内码，使系统能解读正确的数据
第五层 会话层
    用于为通信双方制定通信方式,并创建、注销会话
第四层 传输层
    用于控制数据流量，并且进行调试错误的处理，确保通信顺利. TCP、UDP
第三层 网络层
    决定如何将发送方的数据传送到接受方，将网络地址翻译成物理地址。考虑网络拥塞程度，服务质量，发送优先权等来选择路线。路由器、IP、ICMP、ARP、RARP
第二层 数据链路层 
    定义如何让格式化的数据进行传输，以及如何让控制对物理介质的的访问。还提供错误检测和纠正，以确保数据的可靠传输。Bridge桥接器 Switch交换器 
第一层 物理层
    主要定义物理设备的标准。网卡、中继器、集线器
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object-Oriented]]></title>
    <link href="http://lumint.github.io/blog/2013/04/18/object-oriented/"/>
    <updated>2013-04-18T11:20:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/04/18/object-oriented</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering]]></title>
    <link href="http://lumint.github.io/blog/2013/04/18/software-engineering/"/>
    <updated>2013-04-18T10:21:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/04/18/software-engineering</id>
    <content type="html"><![CDATA[<p>Software Engineer:目的是生产出满足客户要求的、未超出预算的、按时交付的、没有错误的软件。</p>

<p>Waterfall Model:</p>

<pre><code>1）需求阶段
    对概念进行研究和细化,提取客户的需求
2）分析阶段
    分析客户需求并以规格说明文档——“期望产品做什么”的形式给出，最后制定出计划，称为SPMP，详细描述期望的软件开发
3）设计阶段
    结构设计:将作为整体的产品分解成各个部分，称为模块,然后设计各个模块，这个过程称为详细设计。得到两个设计文档描述“产品是如何做”
4）实现阶段
    对各个部分独立地进行编码和测试
5）交付和维护
    安装到客户计算机中并通过验收测试。交付后维护包括软件修复和软件改进
6）退役
</code></pre>

<p>Software: 包括规格说明文档、设计文档、各种法律和财务文档、SPMP、其他管理文档和各种类型手册</p>

<p>生命周期模型:</p>

<pre><code>进化树模型              与现实世界软件开发最接近的模型，与迭代-递增模型等价
迭代-递增生命周期模型     与现实世界最接近的模型，蕴含统一过程方法.即软件制品是一块一块制造的(递增)，每个增加经过多个版本(迭代)
编码-修补生命周期模型     适用与不需要任何维护的小程序,不适合重要程序
瀑布生命周期模型         纪律性强制的方法，文档驱动,交付的产品可能不符合客户的要求
快速原型开发模型         确保交付的产品符合客户的要求
敏捷过程               客户的需求模糊时能很好的工作,似乎只适合小规模的项目
同步-稳定生命周期模型     能满足未来用户的要求，确保各组件能成功集成
螺旋生命周期模型         风险驱动,只能用于大型的内部软件产品，开发者必须精通风险分析和风险排除
</code></pre>

<p>统一过程的五个核心工作流:</p>

<pre><code>需求流:让开发组织确定客户的需求，输出必须能够完全被客户所理解。
分析流:分析和提取需求，以获得正确的开发软件产品和易于维护它所必需的需求，分析流中一个主要的制品是SPMP。
设计流:细化分析流的制品，直至材料处于程序员可实现的形式。传统设计&lt;确定内部结构，将产品分解成模块,设计小组进行模块化分解(结构设计)，为每个模块选择相应的算法和数据结构(详细设计)&gt; 面向对象范型设计&lt;提取类并在设计流期间设计它，面向对象的分析流来执行(对应结构化设计)，面向对象设计流(对应详细设计)&gt;
实现流:用选择的实现语言实现目标软件产品。
测试流:最重要的一个特性是对所有的制品都是可traceability.   
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flow my heart]]></title>
    <link href="http://lumint.github.io/blog/2013/04/17/flow-my-heart/"/>
    <updated>2013-04-17T23:13:00+08:00</updated>
    <id>http://lumint.github.io/blog/2013/04/17/flow-my-heart</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
